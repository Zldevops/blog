import{_ as e,c as r,o as l,a as n}from"./app-BdX2W5SP.js";const a={},s=n('<h1 id="kubernetes-k8s-核心组件详解" tabindex="-1"><a class="header-anchor" href="#kubernetes-k8s-核心组件详解"><span>Kubernetes (k8s) 核心组件详解</span></a></h1><p>Kubernetes (k8s) 是一个可移植、可扩展的开源平台，用于自动化部署、扩展和管理容器化应用。它最初由 Google 设计，现在由 Cloud Native Computing Foundation (CNCF) 维护。Kubernetes 由多个关键组件构成，这些组件共同协作，实现了对容器化应用的高效管理。</p><h2 id="kubernetes-架构概览" tabindex="-1"><a class="header-anchor" href="#kubernetes-架构概览"><span>Kubernetes 架构概览</span></a></h2><p>Kubernetes 的架构可以分为两个主要部分：Master 节点和 Worker 节点。</p><ul><li><strong>Master 节点</strong>：负责集群管理，包括 API 服务器、控制器管理器、调度器等。</li><li><strong>Worker 节点</strong>：运行应用容器的节点，包含 Kubelet、kube-proxy 和容器运行时。</li></ul><h2 id="master-节点组件" tabindex="-1"><a class="header-anchor" href="#master-节点组件"><span>Master 节点组件</span></a></h2><h3 id="_1-api-server-kube-apiserver" tabindex="-1"><a class="header-anchor" href="#_1-api-server-kube-apiserver"><span>1. API Server (kube-apiserver)</span></a></h3><ul><li><strong>角色</strong>：提供集群的唯一入口，处理所有 API 请求。</li><li><strong>原理</strong>：接收来自客户端（如 <code>kubectl</code>、UI 界面）和其他组件的请求，验证和授权请求，然后将其转发到其他组件或更新 etcd 中的数据。</li><li><strong>端口</strong>：6443，集群内部所有及外部通信都是通过 HTTPS 协议进行。</li></ul><h3 id="_2-controller-manager-kube-controller-manager" tabindex="-1"><a class="header-anchor" href="#_2-controller-manager-kube-controller-manager"><span>2. Controller Manager (kube-controller-manager)</span></a></h3><ul><li><strong>角色</strong>：运行控制器来监控集群状态，并自动执行故障检测、故障恢复和自动伸缩等操作。</li><li><strong>原理</strong>：包含多个控制器，如节点控制器、端点控制器等，确保集群的状态符合期望。</li></ul><h3 id="_3-scheduler-kube-scheduler" tabindex="-1"><a class="header-anchor" href="#_3-scheduler-kube-scheduler"><span>3. Scheduler (kube-scheduler)</span></a></h3><ul><li><strong>角色</strong>：决定未绑定的 Pod 应该在哪个节点上运行。</li><li><strong>原理</strong>：根据预定的调度策略选择合适的节点，并将 Pod 调度到该节点上。</li></ul><h3 id="_4-etcd" tabindex="-1"><a class="header-anchor" href="#_4-etcd"><span>4. etcd</span></a></h3><ul><li><strong>角色</strong>：分布式键值存储，保存整个集群的状态和配置信息。</li><li><strong>原理</strong>：存储集群的整体状态、配置信息和元数据，被 kube-apiserver 用于存储配置信息、Pod 状态、Service 数据等。</li></ul><h2 id="worker-节点组件" tabindex="-1"><a class="header-anchor" href="#worker-节点组件"><span>Worker 节点组件</span></a></h2><h3 id="_1-kubelet" tabindex="-1"><a class="header-anchor" href="#_1-kubelet"><span>1. Kubelet</span></a></h3><ul><li><strong>角色</strong>：每个节点上的代理，负责执行 Pod 和容器。</li><li><strong>原理</strong>：与 API 服务器通信，获取分配给该节点的 Pod，确保这些 Pod 处于期望的状态。</li></ul><h3 id="_2-kube-proxy" tabindex="-1"><a class="header-anchor" href="#_2-kube-proxy"><span>2. kube-proxy</span></a></h3><ul><li><strong>角色</strong>：维护节点上的网络规则。</li><li><strong>原理</strong>：确保 Pod 之间的网络通信正确路由，实现 Service 的负载均衡和网络策略。</li></ul><h3 id="_3-container-runtime-如-docker-containerd-cri-o" tabindex="-1"><a class="header-anchor" href="#_3-container-runtime-如-docker-containerd-cri-o"><span>3. Container Runtime (如 Docker, containerd, CRI-O)</span></a></h3><ul><li><strong>角色</strong>：运行容器的底层引擎。</li><li><strong>原理</strong>：负责创建和运行容器，以及管理容器的生命周期。</li></ul><h2 id="其他重要组件" tabindex="-1"><a class="header-anchor" href="#其他重要组件"><span>其他重要组件</span></a></h2><h3 id="_1-coredns" tabindex="-1"><a class="header-anchor" href="#_1-coredns"><span>1. CoreDNS</span></a></h3><ul><li><strong>角色</strong>：为集群内的服务提供 DNS 解析功能。</li><li><strong>原理</strong>：提供域名解析服务，使 Pod 可以通过 DNS 名称访问其他服务。</li></ul><h3 id="_2-ingress-controller" tabindex="-1"><a class="header-anchor" href="#_2-ingress-controller"><span>2. Ingress Controller</span></a></h3><ul><li><strong>角色</strong>：处理进入集群的 HTTP(S) 流量，通常作为反向代理或负载均衡器。</li><li><strong>原理</strong>：根据 Ingress 对象的配置，将外部请求路由到集群内的服务。</li></ul><h3 id="_3-network-plugins" tabindex="-1"><a class="header-anchor" href="#_3-network-plugins"><span>3. Network Plugins</span></a></h3><ul><li><strong>角色</strong>：实现集群内的网络策略和通信。</li><li><strong>原理</strong>：确保 Pod 间可以通过 IP 地址相互通信，并且可以实现更高级别的网络隔离。</li></ul><h3 id="_4-storage-class" tabindex="-1"><a class="header-anchor" href="#_4-storage-class"><span>4. Storage Class</span></a></h3><ul><li><strong>角色</strong>：定义存储类来管理持久卷 (Persistent Volume, PV)。</li><li><strong>原理</strong>：通过配置存储类，可以控制存储的类型、性能特性等。</li></ul><h3 id="_5-horizontal-pod-autoscaler-hpa" tabindex="-1"><a class="header-anchor" href="#_5-horizontal-pod-autoscaler-hpa"><span>5. Horizontal Pod Autoscaler (HPA)</span></a></h3><ul><li><strong>角色</strong>：根据 Pod 的 CPU 或内存使用情况自动调整 Pod 的副本数量。</li><li><strong>原理</strong>：监控资源使用情况，并根据预设的阈值增加或减少 Pod 的副本数。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Kubernetes 通过其丰富的组件集，提供了一套完整的容器编排方案。这些组件相互配合，使得 Kubernetes 成为了管理大规模容器集群的理想选择。无论是简单的应用部署还是复杂的多云环境管理，Kubernetes 都能够提供所需的灵活性和可扩展性。</p>',34),t=[s];function o(i,c){return l(),r("div",null,t)}const h=e(a,[["render",o],["__file","index.html.vue"]]),u=JSON.parse(`{"path":"/article/1wrqihst/","title":"k8s-component","lang":"zh-CN","frontmatter":{"title":"k8s-component","author":null,"createTime":"2024/08/04 01:52:42","permalink":"/article/1wrqihst/","tags":["kubenetes"],"head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"Kubernetes 架构概览","slug":"kubernetes-架构概览","link":"#kubernetes-架构概览","children":[]},{"level":2,"title":"Master 节点组件","slug":"master-节点组件","link":"#master-节点组件","children":[{"level":3,"title":"1. API Server (kube-apiserver)","slug":"_1-api-server-kube-apiserver","link":"#_1-api-server-kube-apiserver","children":[]},{"level":3,"title":"2. Controller Manager (kube-controller-manager)","slug":"_2-controller-manager-kube-controller-manager","link":"#_2-controller-manager-kube-controller-manager","children":[]},{"level":3,"title":"3. Scheduler (kube-scheduler)","slug":"_3-scheduler-kube-scheduler","link":"#_3-scheduler-kube-scheduler","children":[]},{"level":3,"title":"4. etcd","slug":"_4-etcd","link":"#_4-etcd","children":[]}]},{"level":2,"title":"Worker 节点组件","slug":"worker-节点组件","link":"#worker-节点组件","children":[{"level":3,"title":"1. Kubelet","slug":"_1-kubelet","link":"#_1-kubelet","children":[]},{"level":3,"title":"2. kube-proxy","slug":"_2-kube-proxy","link":"#_2-kube-proxy","children":[]},{"level":3,"title":"3. Container Runtime (如 Docker, containerd, CRI-O)","slug":"_3-container-runtime-如-docker-containerd-cri-o","link":"#_3-container-runtime-如-docker-containerd-cri-o","children":[]}]},{"level":2,"title":"其他重要组件","slug":"其他重要组件","link":"#其他重要组件","children":[{"level":3,"title":"1. CoreDNS","slug":"_1-coredns","link":"#_1-coredns","children":[]},{"level":3,"title":"2. Ingress Controller","slug":"_2-ingress-controller","link":"#_2-ingress-controller","children":[]},{"level":3,"title":"3. Network Plugins","slug":"_3-network-plugins","link":"#_3-network-plugins","children":[]},{"level":3,"title":"4. Storage Class","slug":"_4-storage-class","link":"#_4-storage-class","children":[]},{"level":3,"title":"5. Horizontal Pod Autoscaler (HPA)","slug":"_5-horizontal-pod-autoscaler-hpa","link":"#_5-horizontal-pod-autoscaler-hpa","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":3.16,"words":947},"git":{"updatedTime":1722738850000,"contributors":[{"name":"Zldevops","email":"zhangfeilong0713@163.com","commits":1}]},"filePathRelative":"category/blog/k8s-component.md","categoryList":[{"id":"c4ef35","sort":10000,"name":"category"},{"id":"17172d","sort":10002,"name":"blog"}]}`);export{h as comp,u as data};
